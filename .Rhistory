sample_peak_id = peak_id,
sample_origin = as.character(sample_origin),
sample_description = as.character(sample_description))
new_series %>%
mutate(timestamp = Sys.time(),
push_id = push_id,
noise = as.logical(NA),
polymer_series_name = as.character(NA),
sample_peak_id = peak_id,
sample_origin = as.character(sample_origin),
sample_description = as.character(sample_description)) %>%
select(., mz, rt, intensity, polymer_id, within_series_id, noise,
polymer_series_name, timestamp, push_id, sample_origin,
sample_description, sample_peak_id)
max_intensities <- new_series %>%
group_by(., polymer_id) %>% # grouping assures a max being selected for each polymer_id
slice_max(intensity, n = 1, with_ties = FALSE) %>%
ungroup() %>% mutate(., max_intensity = TRUE) %>% select(., polymer_id, sample_peak_id, max_intensity)
new_series <- new_series %>%
mutate(timestamp = Sys.time(),
push_id = push_id,
noise = as.logical(NA),
polymer_series_name = as.character(NA),
sample_peak_id = peak_id,
sample_origin = as.character(sample_origin),
sample_description = as.character(sample_description)) %>%
select(., mz, rt, intensity, polymer_id, within_series_id, noise,
polymer_series_name, timestamp, push_id, sample_origin,
sample_description, sample_peak_id)
# Find and add max intensity identifier to new_series
max_intensities <- new_series %>%
group_by(., polymer_id) %>% # grouping assures a max being selected for each polymer_id
slice_max(intensity, n = 1, with_ties = FALSE) %>%
ungroup() %>% mutate(., max_intensity = TRUE) %>% select(., polymer_id, sample_peak_id, max_intensity)
max_intensities
new_series <- full_join(new_series, max_intensities,
by = c("polymer_id", "sample_peak_id")) %>%
mutate(., max_intensity = if_else(is.na(max_intensity), FALSE, max_intensity)) %>%
group_by(., polymer_id) %>%
mutate(., normalized_intensity = intensity / sum(intensity)) %>%
select(., -"intensity") %>%
ungroup(.)
new_series
series_db <- bind_rows(series_db, new_series)
series_db
load_all()
document()
document()
load_all()
document()
load_all()
document()
?options
load_all()
library(xcms)
setwd("~/Projects/2022-may-christoph-r-xcms-course")
setwd("~/Projects/2022-may-christoph-r-xcms-course")
library(xcms)
## clean environment and console to easily track the calculations
rm(list=ls())
cat("\014")
## increase RStudio internal console length
rstudioapi::writePreference("console_max_lines", 10000)
#### Parameters for processing
## Set working directory (directory where the script is saved)
setwd("~/LV_DataScience/")
library(devtools)
load_all()
load_all()
devtools::install(build_vignettes = T)
devtools::install(build_vignettes = T)
library(devtools)
load_all()
devtools::install(build_vignettes = T)
??homologueDiscoverer
remove.packages(rsidentifier)
devtools::uninstall(rsidentifier)
devtools::uninstall("rsidentifier")
library(devtools)
load_all()
devtools::install(build_vignettes = T)
??homologueDiscoverer
peak_table <- mtbls1358 %>%
filter(., mz > 500, rt > 500)
peak_table <- homologueDiscoverer::mtbls1358 %>%
filter(., mz > 500, rt > 500)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
plotAnnotatedStatic <- function(annotated, legend_setting = "bottom"){
annotated <- mutate(annotated,
homologue_id = if_else(is.na(homologue_id), 0L, homologue_id),
homologue_id = as.factor(homologue_id))
colourCount = length(unique(annotated$homologue_id))
getPalette = colorRampPalette(RColorBrewer::brewer.pal(9, "Set1"))
ncolor = length(unique(annotated$homologue_id))
annotated <- arrange(annotated, desc(homologue_id))
g <- ggplot(annotated, aes(group = homologue_id)) +
geom_point(aes(x = rt, y = mz, color = homologue_id, size = homologue_id,
shape = homologue_id, alpha = homologue_id)) +
geom_line(data = filter(annotated, homologue_id != 0),
aes(x = rt, y = mz, group = homologue_id), alpha = 0.4, size = 0.1) +
ggtitle("Annotated Peak Table") +
scale_colour_manual(values = c("black", getPalette(colourCount-1))) +
scale_alpha_manual(values =  c(0.2, rep(0.85, times = ncolor))) +
scale_size_manual(values = c(0.1, rep(1.5, times = ncolor))) +
scale_shape_manual(values = c(1, rep(19, times = ncolor))) +
xlab("Retention Time (s)") +
ylab("Mass to Charge Ratio") +
theme(legend.position=legend_setting, text = element_text(family="mono"))
return(g)
}
library(homologueDiscoverer)
peak_table <- homologueDiscoverer::mtbls1358 %>%
filter(., mz > 500, rt > 500)
peak_table <- mtbls1358 %>%
filter(., mz > 500, rt > 500)
library(homologueDiscoverer)
mtbls1358
?homologueDiscoverer
??homologueDiscoverer
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
plotAnnotatedStatic <- function(annotated, legend_setting = "bottom"){
annotated <- mutate(annotated,
homologue_id = if_else(is.na(homologue_id), 0L, homologue_id),
homologue_id = as.factor(homologue_id))
colourCount = length(unique(annotated$homologue_id))
getPalette = colorRampPalette(RColorBrewer::brewer.pal(9, "Set1"))
ncolor = length(unique(annotated$homologue_id))
annotated <- arrange(annotated, desc(homologue_id))
g <- ggplot(annotated, aes(group = homologue_id)) +
geom_point(aes(x = rt, y = mz, color = homologue_id, size = homologue_id,
shape = homologue_id, alpha = homologue_id)) +
geom_line(data = filter(annotated, homologue_id != 0),
aes(x = rt, y = mz, group = homologue_id), alpha = 0.4, size = 0.1) +
ggtitle("Annotated Peak Table") +
scale_colour_manual(values = c("black", getPalette(colourCount-1))) +
scale_alpha_manual(values =  c(0.2, rep(0.85, times = ncolor))) +
scale_size_manual(values = c(0.1, rep(1.5, times = ncolor))) +
scale_shape_manual(values = c(1, rep(19, times = ncolor))) +
xlab("Retention Time (s)") +
ylab("Mass to Charge Ratio") +
theme(legend.position=legend_setting, text = element_text(family="mono"))
return(g)
}
library(homologueDiscoverer)
library(devtools)
devtools::install(build_vignettes = TRUE)
devtools::install(build_vignettes = TRUE)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
plotAnnotatedStatic <- function(annotated, legend_setting = "bottom"){
annotated <- mutate(annotated,
homologue_id = if_else(is.na(homologue_id), 0L, homologue_id),
homologue_id = as.factor(homologue_id))
colourCount = length(unique(annotated$homologue_id))
getPalette = colorRampPalette(RColorBrewer::brewer.pal(9, "Set1"))
ncolor = length(unique(annotated$homologue_id))
annotated <- arrange(annotated, desc(homologue_id))
g <- ggplot(annotated, aes(group = homologue_id)) +
geom_point(aes(x = rt, y = mz, color = homologue_id, size = homologue_id,
shape = homologue_id, alpha = homologue_id)) +
geom_line(data = filter(annotated, homologue_id != 0),
aes(x = rt, y = mz, group = homologue_id), alpha = 0.4, size = 0.1) +
ggtitle("Annotated Peak Table") +
scale_colour_manual(values = c("black", getPalette(colourCount-1))) +
scale_alpha_manual(values =  c(0.2, rep(0.85, times = ncolor))) +
scale_size_manual(values = c(0.1, rep(1.5, times = ncolor))) +
scale_shape_manual(values = c(1, rep(19, times = ncolor))) +
xlab("Retention Time (s)") +
ylab("Mass to Charge Ratio") +
theme(legend.position=legend_setting, text = element_text(family="mono"))
return(g)
}
library(homologueDiscoverer)
peak_table <- mtbls1358 %>%
filter(., mz > 500, rt > 500)
mtbls1358
library(devtools)
document()
load_all()
mtbls1358
library(devtools)
devtools::install(build_vignettes = T)
library(homologueDiscoverer)
mtbls1358
devtools::install(build_vignettes = T)
library(homologueDiscoverer)
mtbls1358
??homologueDiscoverer
devtools::check(...)
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::install(build_vignettes = T)
devtools::install(build_vignettes = T)
devtools::install(build_vignettes = T)
devtools::install(build_vignettes = T)
devtools::check()
#' plotPeakTableInteractive
#'
#' Opens s shiny web-application with an interactive plot depicting all the series in the provided series data base. Accepts the series
#'
#' @param seriesdb
#'
plotSeriesDBInteractive <- function(seriesdb, max_legend_size = 100) {
seriesdb <- mutate(seriesdb, homologue_id = as.factor(homologue_id),
timestamp = as.character(timestamp))
if (length(unique(seriesdb$homologue_id)) > max_legend_size) {
legend_setting = "none"
} else {
legend_setting = "right"
}
colourCount = length(unique(seriesdb$homologue_id))
getPalette = colorRampPalette(RColorBrewer::brewer.pal(9, "Set1"))
ncolor = length(unique(seriesdb$homologue_id))
seriesdb <- arrange(seriesdb, desc(homologue_id))
ui <- fluidPage(
plotOutput("plot", width = '100%', height = 600,
dblclick = "plot_dblclick",
brush = brushOpts(
id = "plot_brush",
resetOnNew = TRUE)),
tableOutput("seriesdb")
)
# Set standard values for x and y limits of the plot if no reactive values provided
xlim_lower <- min(seriesdb$rt) - 0.005 * median(seriesdb$rt)
xlim_upper <- max(seriesdb$rt) + 0.005 * median(seriesdb$rt)
ylim_lower <- min(seriesdb$mz) - 0.005 * median(seriesdb$mz)
ylim_upper <- max(seriesdb$mz) + 0.005 * median(seriesdb$mz)
server <- function(input, output) {
ranges <- reactiveValues(x = c(xlim_lower, xlim_upper), y = c(ylim_lower, ylim_upper)) # defaults provided here
# When a double-click happens, check if there's a brush on the plot.
# If so, zoom to the brush bounds; if not, reset the zoom.
observeEvent(input$plot_dblclick, {
brush <- input$plot_brush
if (!is.null(brush)) {
ranges$x <- c(brush$xmin, brush$xmax)
ranges$y <- c(brush$ymin, brush$ymax)
} else {
ranges$x <- c(xlim_lower, xlim_upper) # defaults provided here
ranges$y <- c(ylim_lower, ylim_upper) # defaults provided here
}
})
output$seriesdb <- renderTable({
brushedPoints(seriesdb, input$plot_brush)
})
output$plot <- renderPlot({
ggplot(seriesdb, aes(group = homologue_id)) +
geom_point(aes(x = rt, y = mz, color = homologue_id, size = homologue_id, shape = homologue_id),
alpha = 0.7) +
geom_line(data = filter(seriesdb, homologue_id != 0), aes(x = rt, y = mz, group = homologue_id), alpha = 0.5) +
ggtitle("Peak Table") +
scale_colour_manual(values = c("black", getPalette(colourCount-1))) +
scale_size_manual(values = c(rep(1.5, times = ncolor))) +
scale_shape_manual(values = c(rep(19, times = ncolor))) +
coord_cartesian(xlim = ranges$x, ylim = ranges$y, expand = FALSE) +
theme(legend.position=legend_setting)
})
}
shinyApp(ui, server)
}
devtools::install(build_vignettes = T)
document()
devtools::install(build_vignettes = T)
mtbls1358
library(homologueDiscoverer)
library(homologueDiscoverer)
mtbls1358
devtools::load_all(".")
homologueDiscoverer::mtbls1358
devtools::load_all(".")
library(homologueDiscoverer)
mtbls1358 <- homologueDiscoverer::mtbls1358
g <- ggplot(annotated, aes(group = homologue_id)) +
geom_point(aes(x = rt, y = mz, color = homologue_id, size = homologue_id,
shape = homologue_id, alpha = homologue_id)) +
geom_line(data = filter(annotated, homologue_id != 0),
aes(x = rt, y = mz, group = homologue_id), alpha = 0.4, size = 0.1) +
ggtitle("Annotated Peak Table") +
scale_colour_manual(values = c("black", getPalette(colourCount-1))) +
scale_alpha_manual(values =  c(0.2, rep(0.85, times = ncolor))) +
scale_size_manual(values = c(0.1, rep(1.5, times = ncolor))) +
scale_shape_manual(values = c(1, rep(19, times = ncolor))) +
xlab("Retention Time (s)") +
ylab("Mass to Charge Ratio") +
theme(legend.position=legend_setting, text = element_text(family="mono"))
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
plotAnnotatedStatic <- function(annotated, legend_setting = "bottom"){
annotated <- mutate(annotated,
homologue_id = if_else(is.na(homologue_id), 0L, homologue_id),
homologue_id = as.factor(homologue_id))
colourCount = length(unique(annotated$homologue_id))
getPalette = colorRampPalette(RColorBrewer::brewer.pal(9, "Set1"))
ncolor = length(unique(annotated$homologue_id))
annotated <- arrange(annotated, desc(homologue_id))
g <- ggplot(annotated, aes(group = homologue_id)) +
geom_point(aes(x = rt, y = mz, color = homologue_id, size = homologue_id,
shape = homologue_id, alpha = homologue_id)) +
geom_line(data = filter(annotated, homologue_id != 0),
aes(x = rt, y = mz, group = homologue_id), alpha = 0.4, size = 0.1) +
ggtitle("Annotated Peak Table") +
scale_colour_manual(values = c("black", getPalette(colourCount-1))) +
scale_alpha_manual(values =  c(0.2, rep(0.85, times = ncolor))) +
scale_size_manual(values = c(0.1, rep(1.5, times = ncolor))) +
scale_shape_manual(values = c(1, rep(19, times = ncolor))) +
xlab("Retention Time (s)") +
ylab("Mass to Charge Ratio") +
theme(legend.position=legend_setting, text = element_text(family="mono"))
return(g)
}
library(homologueDiscoverer)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
plotAnnotatedStatic <- function(annotated, legend_setting = "bottom"){
annotated <- mutate(annotated,
homologue_id = if_else(is.na(homologue_id), 0L, homologue_id),
homologue_id = as.factor(homologue_id))
colourCount = length(unique(annotated$homologue_id))
getPalette = colorRampPalette(RColorBrewer::brewer.pal(9, "Set1"))
ncolor = length(unique(annotated$homologue_id))
annotated <- arrange(annotated, desc(homologue_id))
g <- ggplot(annotated, aes(group = homologue_id)) +
geom_point(aes(x = rt, y = mz, color = homologue_id, size = homologue_id,
shape = homologue_id, alpha = homologue_id)) +
geom_line(data = filter(annotated, homologue_id != 0),
aes(x = rt, y = mz, group = homologue_id), alpha = 0.4, size = 0.1) +
ggtitle("Annotated Peak Table") +
scale_colour_manual(values = c("black", getPalette(colourCount-1))) +
scale_alpha_manual(values =  c(0.2, rep(0.85, times = ncolor))) +
scale_size_manual(values = c(0.1, rep(1.5, times = ncolor))) +
scale_shape_manual(values = c(1, rep(19, times = ncolor))) +
xlab("Retention Time (s)") +
ylab("Mass to Charge Ratio") +
theme(legend.position=legend_setting, text = element_text(family="mono"))
return(g)
}
library(homologueDiscoverer)
mtbls1358 <- homologueDiscoverer::mtbls1358
peak_table <- mtbls1358 %>%
filter(., mz > 500, rt > 500)
print(peak_table)
homologueDiscoverer::mtbls1358
devtools::load_all(".")
mtbls1358 <- homologueDiscoverer::mtbls1358
peak_table <- mtbls1358 %>%
filter(., mz > 500, rt > 500)
print(peak_table)
tools::checkRdaFiles()
mtbls1358 <- data("mtbls1358")
peak_table <- mtbls1358 %>%
filter(., mz > 500, rt > 500)
mtbls1358 <- data(mtbls1358)
data(mtbls1358)
data(mtbls1358)
mtbls1358
library(homologueDiscoverer)
data(mtbls1358)
peak_table <- mtbls1358 %>%
filter(., mz > 500, rt > 500)
print(peak_table)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
plotAnnotatedStatic <- function(annotated, legend_setting = "bottom"){
annotated <- mutate(annotated,
homologue_id = if_else(is.na(homologue_id), 0L, homologue_id),
homologue_id = as.factor(homologue_id))
colourCount = length(unique(annotated$homologue_id))
getPalette = colorRampPalette(RColorBrewer::brewer.pal(9, "Set1"))
ncolor = length(unique(annotated$homologue_id))
annotated <- arrange(annotated, desc(homologue_id))
g <- ggplot(annotated, aes(group = homologue_id)) +
geom_point(aes(x = rt, y = mz, color = homologue_id, size = homologue_id,
shape = homologue_id, alpha = homologue_id)) +
geom_line(data = filter(annotated, homologue_id != 0),
aes(x = rt, y = mz, group = homologue_id), alpha = 0.4, size = 0.1) +
ggtitle("Annotated Peak Table") +
scale_colour_manual(values = c("black", getPalette(colourCount-1))) +
scale_alpha_manual(values =  c(0.2, rep(0.85, times = ncolor))) +
scale_size_manual(values = c(0.1, rep(1.5, times = ncolor))) +
scale_shape_manual(values = c(1, rep(19, times = ncolor))) +
xlab("Retention Time (s)") +
ylab("Mass to Charge Ratio") +
theme(legend.position=legend_setting, text = element_text(family="mono"))
return(g)
}
library(homologueDiscoverer)
data(mtbls1358)
peak_table <- mtbls1358 %>%
filter(., mz > 500, rt > 500)
print(peak_table)
annotated_peak_table_01 <- detectHomologues(peak_table, mz_min = 10, mz_max = 20,
rt_min = 1, rt_max = 100,
ppm_tolerance = 5,
min_series_length = 5,
search_mode = "untargeted",
step_mode = "increment", verbose = F)
annotated_peak_table_02 <- detectHomologues(peak_table, mz_steps = c(44.02628),
rt_min = 1, rt_max = 100,
ppm_tolerance = 5,
min_series_length = 5,
search_mode = "targeted",
step_mode = "increment", verbose = F)
plotAnnotatedStatic(annotated_peak_table_01) # use ptbPlotInteractive for interactive plot.
plotAnnotatedStatic(annotated_peak_table_02) # use ptbPlotInteractive for interactive plot.
sdb <- sdbCreate(annotated_peak_table_01, sample_origin = "mtbls1358")
overlapping_ids <- sdbCheckContained(sdb, annotated_peak_table_02, ppm_tolerance = 0.5, rt_tolerance = 0.5)
print(overlapping_ids)
# sdbPush is used to add the annotated parts of an annotated peak table to an existing database.
# The filter command can be used in conjunction with sdbCheckContained to avoid overlapping series.
sdb <- sdbPush(sdb, filter(annotated_peak_table_02, !(homologue_id %in% overlapping_ids)))
dual_annotated <- annotateHomologues(peak_table, sdb,
ppm_matching_tolerance = 1,
ppm_step_tolerance = 10,
rt_tolerance = 1,
min_match_length = 4)
plotAnnotatedStatic(dual_annotated) # use ptbPlotInteractive for interactive plot.
print(dual_annotated, width = Inf)
summary <- sdbSummarize(dual_annotated)
print(sdb, width = Inf)
summary <- sdbSummarize(dual_annotated)
print(sdb, width = Inf)
summary <- sdbSummarize(sdb)
??homologueDiscoverer
devtools::install(build_vignettes = T)
??homologueDiscoverer
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
plotAnnotatedStatic <- function(annotated, legend_setting = "bottom"){
annotated <- mutate(annotated,
homologue_id = if_else(is.na(homologue_id), 0L, homologue_id),
homologue_id = as.factor(homologue_id))
colourCount = length(unique(annotated$homologue_id))
getPalette = colorRampPalette(RColorBrewer::brewer.pal(9, "Set1"))
ncolor = length(unique(annotated$homologue_id))
annotated <- arrange(annotated, desc(homologue_id))
g <- ggplot(annotated, aes(group = homologue_id)) +
geom_point(aes(x = rt, y = mz, color = homologue_id, size = homologue_id,
shape = homologue_id, alpha = homologue_id)) +
geom_line(data = filter(annotated, homologue_id != 0),
aes(x = rt, y = mz, group = homologue_id), alpha = 0.4, size = 0.1) +
ggtitle("Annotated Peak Table") +
scale_colour_manual(values = c("black", getPalette(colourCount-1))) +
scale_alpha_manual(values =  c(0.2, rep(0.85, times = ncolor))) +
scale_size_manual(values = c(0.1, rep(1.5, times = ncolor))) +
scale_shape_manual(values = c(1, rep(19, times = ncolor))) +
xlab("Retention Time (s)") +
ylab("Mass to Charge Ratio") +
theme(legend.position=legend_setting, text = element_text(family="mono"))
return(g)
}
library(homologueDiscoverer)
data(mtbls1358)
peak_table <- mtbls1358 %>%
filter(., mz > 500, rt > 500)
print(peak_table)
annotated_peak_table_01 <- detectHomologues(peak_table, mz_min = 10, mz_max = 20,
rt_min = 1, rt_max = 100,
ppm_tolerance = 5,
min_series_length = 5,
search_mode = "untargeted",
step_mode = "increment", verbose = F)
annotated_peak_table_02 <- detectHomologues(peak_table, mz_steps = c(44.02628),
rt_min = 1, rt_max = 100,
ppm_tolerance = 5,
min_series_length = 5,
search_mode = "targeted",
step_mode = "increment", verbose = F)
plotAnnotatedStatic(annotated_peak_table_01) # use ptbPlotInteractive for interactive plot.
plotAnnotatedStatic(annotated_peak_table_02) # use ptbPlotInteractive for interactive plot.
sdb <- sdbCreate(annotated_peak_table_01, sample_origin = "mtbls1358")
overlapping_ids <- sdbCheckContained(sdb, annotated_peak_table_02, ppm_tolerance = 0.5, rt_tolerance = 0.5)
print(overlapping_ids)
# sdbPush is used to add the annotated parts of an annotated peak table to an existing database.
# The filter command can be used in conjunction with sdbCheckContained to avoid overlapping series.
sdb <- sdbPush(sdb, filter(annotated_peak_table_02, !(homologue_id %in% overlapping_ids)))
dual_annotated <- annotateHomologues(peak_table, sdb,
ppm_matching_tolerance = 1,
ppm_step_tolerance = 10,
rt_tolerance = 1,
min_match_length = 4)
plotAnnotatedStatic(dual_annotated) # use ptbPlotInteractive for interactive plot.
print(sdb, width = Inf)
summary <- sdbSummarize(sdb)
summary <- sdbSummarize(sdb)
sdb
sdb
print(sdb, width = Inf)
summary <- sdbSummarize(sdb)
data(mtbls1358)
mtbls1358
16106 / 1372
1372 / 16106
*100
( 1372 / 16106 ) *100
